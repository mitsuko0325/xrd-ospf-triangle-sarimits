#------------------------------------------------------------------------------
# docker-compose.xr.yml - Example XR compose topology for XR Docker.
# Used as input for scripts/xr-compose
#
# Copyright (c) 2020-2021 by Cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------------------

# Topology
# --------------
#      source
#       |
#      xrd1
#     /    \
#  xrd2 -- xrd3-server
#   |
#  dest

# Networks
# --------------
# host (172.28.0.1/16): xrd1 172.28.0.10, xrd2 172.28.0.20, xrd3 172.28.0.30
# source-xrd1 (192.168.1.0/24):  192.168.1.2 - 192.168.1.254 (source - Gi0/0/0/0)
# dest-xrd2 (192.168.2.0/24):  192.168.2.2 - 192.168.2.254 (dest - Gi0/0/0/2)
# xrd1-xrd2 (10.0.1.0/24):  10.0.1.2 - 10.0.3.3 (Gi0/0/0/1 - Gi0/0/0/0)
# xrd1-xrd3 (10.0.2.0/24):  10.0.2.2 - 10.0.2.3 (Gi0/0/0/2 - Gi0/0/0/0)
# xrd2-xrd3 (10.0.3.0/24):  10.0.3.2 - 10.0.3.3 (Gi0/0/0/1 - Gi0/0/0/2)

# Author: sarimits

services:
  source:
    non_xr: true
    image: ubuntu:14.04
    container_name: source
    stdin_open: true
    tty: true
    cap_add:
      - NET_ADMIN
    #Static Routeを編集
    command: /bin/bash -c "ip route add 192.168.0.0/22 via 192.168.1.254 && /bin/bash"
    networks:
      source-xrd-1:
        ipv4_address: 192.168.1.2

  xrd-1:
    xr_startup_cfg: xrd-1_xrconf.cfg
    # xrd1<->xrd3接続用のinterfaceを追加
    xr_interfaces:
      - Gi0/0/0/0
      - Gi0/0/0/1
      - Gi0/0/0/2
      - Mg0/RP0/CPU0/0
    networks:
      source-xrd-1:
        ipv4_address: 192.168.1.254

  xrd-2:
    xr_startup_cfg: xrd-2_xrconf.cfg
    # xrd2<->xrd3接続用のinterfaceを追加 
    xr_interfaces:
      - Gi0/0/0/0
      - Gi0/0/0/1
      - Gi0/0/0/2
      - Mg0/RP0/CPU0/0
    networks:
      xrd-2-dest:
        ipv4_address: 192.168.2.254

  dest:
    non_xr: true
    image: ubuntu:14.04
    container_name: dest
    stdin_open: true
    tty: true
    networks:
      xrd-2-dest:
        ipv4_address: 192.168.2.2
    cap_add:
      - NET_ADMIN
    #Static Routeを編集
    command: /bin/bash -c "ip route add 192.168.0.0/22 via 192.168.2.254 && /bin/bash"

  #xrd-3を追加
  xrd-3:
    xr_startup_cfg: xrd-3_xrconf.cfg
    xr_interfaces:
      - Gi0/0/0/0
      - Gi0/0/0/1
      - Gi0/0/0/2
      - Mg0/RP0/CPU0/0
    #serverへ接続したいので、networksを設定
    networks:
    #xrd-3-serverは、下のnetworks(docker network)と紐づく
      xrd-3-server:
        ipv4_address: 192.168.3.254

  #serverを追加
  server:
    non_xr: true
    image: ubuntu:14.04
    container_name: server
    stdin_open: true
    tty: true
    networks:
    #xrd-3-serverは、下のnetworks(docker network)と紐づく
      xrd-3-server:
        ipv4_address: 192.168.3.2
    cap_add:
      - NET_ADMIN
    command: /bin/bash -c "ip route add 192.168.0.0/22 via 192.168.3.254 && /bin/bash"

#xrd-1<->xrd3, xrd2<->xrd3のリンクを作成
xr_l2networks:
  - ["xrd-1:Gi0/0/0/1", "xrd-2:Gi0/0/0/0"]
  - ["xrd-1:Gi0/0/0/2", "xrd-3:Gi0/0/0/0"]
  - ["xrd-2:Gi0/0/0/2", "xrd-3:Gi0/0/0/1"]

#ここの設定でdocker networkの仮想Swithchが作成される
#XRd Interfaceが,XRd以外のホストやコンテナと通信する場合に設定が必要
networks:
  mgmt:
    xr_interfaces:
      - xrd-1:Mg0/RP0/CPU0/0
      - xrd-2:Mg0/RP0/CPU0/0
      - xrd-3:Mg0/RP0/CPU0/0
    ipam:
      config:
        - subnet: 172.30.0.0/24
  source-xrd-1:
    ipam:
      config:
        - subnet: 192.168.1.0/24
    xr_interfaces:
      - xrd-1:Gi0/0/0/0
  xrd-2-dest:
    ipam:
      config:
        - subnet: 192.168.2.0/24
    xr_interfaces:
      - xrd-2:Gi0/0/0/1 
  #docker networkの作成とSubnet, それに接続するxrdのinterfaceの指定
  xrd-3-server:
    ipam:
      config:
        - subnet: 192.168.3.0/24
    xr_interfaces:
      - xrd-3:Gi0/0/0/2
